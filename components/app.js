import React from 'react'
var io = require('socket.io-client');
class App extends React.Component {
    render() {
        return (
            <div>
            <CommentBox/>
        </div>
        );
    }
}

class CommentBox extends React.Component {
    constructor(){
        console.log("cons executed");
        super();
        this.state = {data :[]};
        this.updateCommentList = this.updateCommentList.bind(this);
    }

    componentWillMount() {
        this.socket = io('http://localhost:3000');
        this.socket.on('connect', this.connect);
        this.socket.on('commentlist',this.updateCommentList);
    }

    connect() {
        console.log("connected");
    }

    updateCommentList(payload){
        this.setState({
            data : payload
        });
    }

    handleCommentSubmit(comment) {
        var comments = this.state.data;
        console.log("data executed");
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({
            data: newComments
        });

        this.socket.emit("commentlist",newComments);
    }

    render() {
        return (
            <div className="commentBox">
            <CommentList data={this.state.data}/>
            <CommenForm  onCommentSubmit={this.handleCommentSubmit.bind(this)} />
        </div>
        );
    }
}

class CommentList extends React.Component {
    render() {
        var commentNodes = this.props.data.map((comment) => {
            return (
                <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
            );
        });
        return (
            <div className="commentList">
              <h3>React Chat App</h3>
        {commentNodes}
      </div>
        );
    }
}

class Comment extends React.Component {
  render() {
    return (
      <div>
        <h4 className="commentAuthor">
          {this.props.author} says:
        </h4>
        <span className="comment">{this.props.children}</span>
      </div>
    );
  }
}

class CommenForm extends React.Component {

    constructor(){
        super();
        this.state= {author :'',text : ''}
    }
    handleAuthorChange(e) {
        this.setState({author : e.target.value})
    }
    handleTextChange(e) {
          this.setState({text : e.target.value})
    }
    handleSubmit(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        if (!text || !author) {
            return;
        }
        this.props.onCommentSubmit({
            author: author,
            text: text
        });
        this.setState({
            author: '',
            text: ''
        });
    }

    render() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit.bind(this)}>
       <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange.bind(this)}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange.bind(this)}
        />
        <input type="submit" value="Post" />
      </form>
        );
    }

}



module.exports = App;
